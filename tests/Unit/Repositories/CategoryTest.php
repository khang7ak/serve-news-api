<?php
//
//namespace Tests\Unit\Repositories;
//
//use PHPUnit\Framework\TestCase;
//use Illuminate\Foundation\Testing\WithFaker;
//use Illuminate\Foundation\Testing\RefreshDatabase;
//use App\CategoryRepository\CategoryRepository;
//use App\Category;
//use Faker\Factory as Faker;
//
//
//class CategoryTest extends TestCase
//{
//    protected $category;
//
//    public function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        $this->faker = Faker::create();
//        //Chuẩn bị dữ liệu test
//        $this->category = [
//            'post_category' => $this->faker->name,
//            'description' => $this->faker->name,
//        ];
//
//        // Khởi tạo lớp ResponsitoryCategory
//        $this->categoryResponsitory = new Category();
//    }
//
//    /**
//     * A basic unit store
//     *
//     * return void
//     */
//    public function testStore()
//    {
//        //Gọi hàm tạo
//        $category = $this->createConfiguredMock($this->category);
//
//        //Kiểm tra kết quả trả về có phải là thể hiện của lớp Category hay ko
//        $this->assertInstanceOf(Category::class, $category);
//
//        //Kiểm tra data trả về
//        $this->assertEquals($this->category['name'], $category->name);
//        $this->assertEquals($this->category['description'], $category->description);
//
//        //Kiểm tra dữ liệu có tồn tại hay ko
//        $this->assertDatabaseHas('categories', $this->category);
//    }
//
//    /**
//     * A basic unit show
//     *
//     * return void
//     */
//    public function testShow()
//    {
//        $category = factory(Category::class)->create();
//        $found = $this->categoryRepository->showCategory($category->id);
//        $this->assertInstanceOf(Category::class, $found);
//        $this->assertEquals($found->name, $category->name);
//        $this->assertEquals($found->description, $category->description);
//    }
//
//    /**
//     * A basic unit update
//     *
//     * return void
//     */
//    public function testUpdate()
//    {
//        // Tạo dữ liệu mẫu
//        $category = factory(Category::class)->create();
//        $newCategory = $this->categoryRepository->updateCategory($this->category, $category);
//
//        // Kiểm tra dữ liệu trả về
//        $this->assertInstanceOf(Category::class, $newCategory);
//        $this->assertEquals($newCategory->name, $this->category['name']);
//        $this->assertEquals($newCategory->description, $this->category['description']);
//
//        // Kiểm tra xem cơ sở dữ liệu đã được cập nhập hay chưa
//        $this->assertDatabaseHas('categories', $this->category);
//    }
//
//    /**
//     * A basic unit delete
//     *
//     * return void
//     */
//    public function testDestroy()
//    {
//        $category = factory(Category::class)->create();
//        $deleteCategory = $this->categoryRepository->destroyCategory($category);
//
//        // Kiểm tra dữ liệu có trả về true hay không
//        $this->assertTrue($deleteCategory);
//
//        // kiểm tra xem dữ liệu đã được xóa trong cơ sở dữ liệu hay chưa
//        $this->assertDatabaseMissing('categories', $category->toArray());
//    }
//}
